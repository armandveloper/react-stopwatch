{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","playing","setPlaying","seconds","setSeconds","minutes","setMinutes","hours","setHours","useEffect","interval","setInterval","clearInterval","className","type","onClick","width","height","viewBox","fill","xmlns","fillRule","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAyGeA,MAvGf,WAAgB,IAAD,EACgBC,oBAAS,GADzB,mBACPC,EADO,KACEC,EADF,OAEgBF,mBAAS,GAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,mBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAIYN,mBAAS,GAJrB,mBAIPO,EAJO,KAIAC,EAJA,KAuBd,OAlBAC,qBAAU,WACT,GAAIR,EAAS,CACZ,IAAMS,EAAWC,aAAY,WACZ,KAAZN,IACHG,EAASD,EAAQ,GACjBD,EAAW,IAEI,KAAZH,GACHG,EAAWD,EAAU,GACrBD,EAAW,IAEXA,EAAWD,EAAU,KAEpB,KACH,OAAO,kBAAMS,cAAcF,OAE1B,CAACT,EAASE,EAASE,EAASE,IAG9B,yBAAKM,UAAU,aACd,yBAAKA,UAAU,qBACd,0BAAMA,UAAU,QACdN,EAAQ,GAAK,IAAMA,EAAQA,EAD7B,KAGA,0BAAMM,UAAU,QACdR,EAAU,GAAK,IAAMA,EAAUA,EADjC,KAGA,0BAAMQ,UAAU,QACdV,EAAU,GAAK,IAAMA,EAAUA,IAGlC,yBAAKU,UAAU,mBACbZ,EACA,4BACCa,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAMb,GAAW,KAE1B,yBACCc,MAAM,MACNC,OAAO,MACPC,QAAQ,YACRL,UAAU,yBACVM,KAAK,eACLC,MAAM,8BAEN,0BACCC,SAAS,UACTC,EAAE,2HAKL,4BACCR,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAAMb,GAAW,KAE1B,yBACCc,MAAM,MACNC,OAAO,MACPC,QAAQ,YACRL,UAAU,4BACVM,KAAK,eACLC,MAAM,8BAEN,0BAAME,EAAE,oIAIVrB,GAAWE,EAAU,GAAKE,EAAU,GAAKE,EAAQ,EACjD,4BACCO,KAAK,SACLD,UAAU,4BACVE,QAAS,WACRb,GAAW,GACXE,EAAW,GACXE,EAAW,GACXE,EAAS,KAGV,yBACCQ,MAAM,MACNC,OAAO,MACPC,QAAQ,YACRL,UAAU,4BACVM,KAAK,eACLC,MAAM,8BAEN,0BAAME,EAAE,0GAGP,QCvFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b8f23be3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n\tconst [playing, setPlaying] = useState(false);\n\tconst [seconds, setSeconds] = useState(0);\n\tconst [minutes, setMinutes] = useState(0);\n\tconst [hours, setHours] = useState(0);\n\tuseEffect(() => {\n\t\tif (playing) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tif (minutes === 59) {\n\t\t\t\t\tsetHours(hours + 1);\n\t\t\t\t\tsetMinutes(0);\n\t\t\t\t}\n\t\t\t\tif (seconds === 59) {\n\t\t\t\t\tsetMinutes(minutes + 1);\n\t\t\t\t\tsetSeconds(0);\n\t\t\t\t} else {\n\t\t\t\t\tsetSeconds(seconds + 1);\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t\treturn () => clearInterval(interval);\n\t\t}\n\t}, [playing, seconds, minutes, hours]);\n\n\treturn (\n\t\t<div className=\"stopwatch\">\n\t\t\t<div className=\"stopwatch-wrapper\">\n\t\t\t\t<span className=\"time\">\n\t\t\t\t\t{hours < 10 ? '0' + hours : hours}:\n\t\t\t\t</span>\n\t\t\t\t<span className=\"time\">\n\t\t\t\t\t{minutes < 10 ? '0' + minutes : minutes}.\n\t\t\t\t</span>\n\t\t\t\t<span className=\"time\">\n\t\t\t\t\t{seconds < 10 ? '0' + seconds : seconds}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"buttons-wrapper\">\n\t\t\t\t{playing ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"button-action button-pause\"\n\t\t\t\t\t\tonClick={() => setPlaying(false)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\twidth=\"1em\"\n\t\t\t\t\t\t\theight=\"1em\"\n\t\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t\t\tclassName=\"bi bi-pause icon-pause\"\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\t\t\t\td=\"M6 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"button-action button-play\"\n\t\t\t\t\t\tonClick={() => setPlaying(true)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\twidth=\"1em\"\n\t\t\t\t\t\t\theight=\"1em\"\n\t\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t\t\tclassName=\"bi bi-play-fill icon-play\"\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path d=\"M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t{playing || seconds > 0 || minutes > 0 || hours > 0 ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"button-action button-stop\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetPlaying(false);\n\t\t\t\t\t\t\tsetSeconds(0);\n\t\t\t\t\t\t\tsetMinutes(0);\n\t\t\t\t\t\t\tsetHours(0);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\twidth=\"1em\"\n\t\t\t\t\t\t\theight=\"1em\"\n\t\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t\t\tclassName=\"bi bi-stop-fill icon-stop\"\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path d=\"M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}